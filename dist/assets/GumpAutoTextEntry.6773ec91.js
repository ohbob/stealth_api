import{S as B,i as C,s as H,e,f as p,g as G,h as t,n as g,p as a}from"./vendor.47d6f2b6.js";function M(A){let o,y,i,x,m,T,k,d,u,_='<code class="language-pascal"><span class="token keyword">procedure</span> GumpAutoTextEntry<span class="token punctuation">(</span>TextEntryID <span class="token punctuation">:</span> Integer<span class="token punctuation">;</span> Value <span class="token punctuation">:</span> <span class="token keyword">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',b,r,v,l,I=`<code class="language-pascal"><span class="token keyword">begin</span>
    WaitTargetGround<span class="token punctuation">(</span><span class="token number">$1BF5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    GumpAutoTextEntry<span class="token punctuation">(</span><span class="token number">1537</span><span class="token punctuation">,</span> "<span class="token number">10</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//set hook for gump TextEntry with return_value 1537, to set its value to 10 (amount of items to be done)</span>
    WaitGump<span class="token punctuation">(</span><span class="token string">'7956'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//set hook for gump button with return_value 7956. If found - send gump reply.</span>
    UseObject<span class="token punctuation">(</span>FindType<span class="token punctuation">(</span><span class="token number">$1EB9</span><span class="token punctuation">,</span>backpack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//use hammer for receiving gump.</span>
<span class="token keyword">end</span><span class="token punctuation">;</span></code>`,E,f,w,c,L='<code class="language-python"><span class="token keyword">def</span> <span class="token function">GumpAutoTextEntry</span><span class="token punctuation">(</span>TextEntryID<span class="token punctuation">,</span> Value<span class="token punctuation">)</span></code>';return{c(){o=e("h1"),o.textContent=`${V}`,y=p(),i=e("p"),i.innerHTML="Set hook for ONE incoming gump and check ALL existing gumps in stealth gump list for containing TextEntryID with <strong>\u201Creturn_value\u201D</strong>  <em>RadiobuttonID</em>, if found - changing its <strong>\u201CValue\u201D</strong> to <em>Value</em>.",x=p(),m=e("p"),m.innerHTML='NB: This method does NOT send a gump reply to server, it\u2019s just changing checkboxes status values. For reply to gump use <a href="Api/WaitGump">WaitGump</a> or <a href="Api/NumGumpButton">NumGumpButton</a>',T=p(),k=e("p"),k.textContent="Pascal",d=p(),u=e("pre"),b=p(),r=e("p"),r.textContent="Pascal Example:",v=p(),l=e("pre"),E=p(),f=e("p"),f.textContent="Python",w=p(),c=e("pre"),G(u,"class","language-pascal"),G(l,"class","language-pascal"),G(c,"class","language-python")},m(n,s){t(n,o,s),t(n,y,s),t(n,i,s),t(n,x,s),t(n,m,s),t(n,T,s),t(n,k,s),t(n,d,s),t(n,u,s),u.innerHTML=_,t(n,b,s),t(n,r,s),t(n,v,s),t(n,l,s),l.innerHTML=I,t(n,E,s),t(n,f,s),t(n,w,s),t(n,c,s),c.innerHTML=L},p:g,i:g,o:g,d(n){n&&a(o),n&&a(y),n&&a(i),n&&a(x),n&&a(m),n&&a(T),n&&a(k),n&&a(d),n&&a(u),n&&a(b),n&&a(r),n&&a(v),n&&a(l),n&&a(E),n&&a(f),n&&a(w),n&&a(c)}}}const N={title:"GumpAutoTextEntry",published:"2021-10-05T21:36:59.459Z",author:"Vizit0r",summary:"API",layout:"blog"},{title:V,published:P,author:S,summary:W,layout:j}=N;class F extends B{constructor(o){super();C(this,o,null,M,H,{})}}export{F as default,N as metadata};
