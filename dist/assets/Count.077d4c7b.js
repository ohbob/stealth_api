import{S as M,i as I,s as O,e as p,f as o,g as _,h as a,n as F,p as t}from"./vendor.47d6f2b6.js";function Q(P){let e,y,i,m,k,w,r,b,l,j='<code class="language-pascal"><span class="token keyword">function</span> Count<span class="token punctuation">(</span>ObjType <span class="token punctuation">:</span> Word<span class="token punctuation">)</span> <span class="token punctuation">:</span> Integer<span class="token punctuation">;</span></code>',x,f,C,u,H='<code class="language-python"><span class="token keyword">def</span> <span class="token function">Count</span><span class="token punctuation">(</span>ObjType<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer</code>',T,d,v,c,L=`<code class="language-pascal"><span class="token keyword">Program</span> <span class="token keyword">New</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foodamount<span class="token punctuation">:</span> integer<span class="token punctuation">;</span>
<span class="token keyword">begin</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">(</span>food<span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxfood<span class="token punctuation">)</span> <span class="token keyword">then</span>
  <span class="token keyword">begin</span>
   foodamount<span class="token operator">:=</span>count <span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>
   FindType<span class="token punctuation">(</span>food<span class="token punctuation">,</span>ground<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> FindQuantity <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">then</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>FindQuantity <span class="token operator">></span> <span class="token punctuation">(</span>maxfood<span class="token operator">-</span>food<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
      grab <span class="token punctuation">(</span>finditem<span class="token punctuation">,</span> maxfood<span class="token operator">-</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">else</span> 
      grab <span class="token punctuation">(</span>finditem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   wait <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">.</span>&#96;&#96;&#96;


</code>`;return{c(){e=p("h1"),e.textContent=`${N}`,y=o(),i=p("p"),i.innerHTML="Searching for items with type <strong><em>ObjType</em></strong> in backpack and returning FindFullQuantity.",m=o(),k=p("p"),k.textContent="NB: This method doesn\u2019t search in subcontainers",w=o(),r=p("p"),r.textContent="Pascal",b=o(),l=p("pre"),x=o(),f=p("p"),f.textContent="Python",C=o(),u=p("pre"),T=o(),d=p("p"),d.textContent="Example Pascal",v=o(),c=p("pre"),_(l,"class","language-pascal"),_(u,"class","language-python"),_(c,"class","language-pascal")},m(n,s){a(n,e,s),a(n,y,s),a(n,i,s),a(n,m,s),a(n,k,s),a(n,w,s),a(n,r,s),a(n,b,s),a(n,l,s),l.innerHTML=j,a(n,x,s),a(n,f,s),a(n,C,s),a(n,u,s),u.innerHTML=H,a(n,T,s),a(n,d,s),a(n,v,s),a(n,c,s),c.innerHTML=L},p:F,i:F,o:F,d(n){n&&t(e),n&&t(y),n&&t(i),n&&t(m),n&&t(k),n&&t(w),n&&t(r),n&&t(b),n&&t(l),n&&t(x),n&&t(f),n&&t(C),n&&t(u),n&&t(T),n&&t(d),n&&t(v),n&&t(c)}}}const S={title:"Count",published:"2020-06-21T21:36:59.459Z",author:"Vizit0r",summary:"API",layout:"blog"},{title:N,published:z,author:A,summary:B,layout:E}=S;class V extends M{constructor(e){super();I(this,e,null,Q,O,{})}}export{V as default,S as metadata};
