import{S as E,i as R,s as O,e as p,f as o,g as A,h as a,n as I,p as t}from"./vendor.47d6f2b6.js";function W(X){let e,P,i,b,r,T,y,M,d,x,c,Y='<code class="language-pascal"><span class="token keyword">function</span> GetPathArray<span class="token punctuation">(</span>DestX <span class="token punctuation">:</span> Word<span class="token punctuation">;</span>DestY <span class="token punctuation">:</span> Word<span class="token punctuation">;</span>Optimized <span class="token punctuation">:</span> Boolean<span class="token punctuation">;</span>Accuracy <span class="token punctuation">:</span> integer<span class="token punctuation">;</span><span class="token keyword">var</span> PathArray <span class="token punctuation">:</span> TPathArray<span class="token punctuation">)</span> <span class="token punctuation">:</span> Integer<span class="token punctuation">;</span></code>',v,f,C,l,G=`<code class="language-pascal"><span class="token keyword">function</span> easyMoveXY<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">:</span> integer<span class="token punctuation">;</span> Optimized<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span> Accuracy <span class="token punctuation">:</span> Integer<span class="token punctuation">;</span> Running<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token punctuation">;</span> 
<span class="token keyword">var</span> 
   StepCnt<span class="token punctuation">,</span>i <span class="token punctuation">:</span> Integer<span class="token punctuation">;</span> 
   mPathArr <span class="token punctuation">:</span> TPathArray<span class="token punctuation">;</span>
 
<span class="token keyword">Begin</span> 
<span class="token keyword">Result</span><span class="token operator">:=</span><span class="token keyword">false</span><span class="token punctuation">;</span> 
<span class="token keyword">While</span> <span class="token keyword">true</span> <span class="token keyword">do</span> 
   <span class="token keyword">begin</span> 
   <span class="token string">''</span>AddToSystemJournal<span class="token punctuation">(</span><span class="token string">'pathfinding...'</span><span class="token punctuation">)</span> 
   StepCnt<span class="token operator">:=</span>GetPathArray<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Optimized<span class="token punctuation">,</span>Accuracy<span class="token punctuation">,</span>mPathArr<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token keyword">If</span> StepCnt<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">then</span> <span class="token keyword">Exit</span><span class="token punctuation">;</span> 
   <span class="token keyword">If</span> StepCnt<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span> 
      <span class="token keyword">begin</span> 
      <span class="token keyword">Result</span><span class="token operator">:=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> 
      <span class="token keyword">Exit</span><span class="token punctuation">;</span> 
      <span class="token keyword">end</span><span class="token punctuation">;</span> 
   <span class="token keyword">For</span> i<span class="token operator">:=</span><span class="token number">0</span> <span class="token keyword">to</span> StepCnt <span class="token keyword">do</span> 
      <span class="token keyword">begin</span> 
 
      <span class="token keyword">If</span> Not IsWorldCellPassable<span class="token punctuation">(</span>getX<span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">,</span>getY<span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mPathArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>X<span class="token punctuation">,</span>mPathArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Y<span class="token punctuation">,</span>WorldNum<span class="token punctuation">,</span>getZ<span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">then</span>  <span class="token keyword">Break</span><span class="token punctuation">;</span> 
      <span class="token keyword">If</span> Not MoveToPoint<span class="token punctuation">(</span>mPathArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>X<span class="token punctuation">,</span>mPathArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Y<span class="token punctuation">,</span>Running<span class="token punctuation">)</span> <span class="token keyword">then</span>  <span class="token keyword">Break</span><span class="token punctuation">;</span> 
      <span class="token keyword">If</span> Dist<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token operator">&lt;=</span>Accuracy <span class="token keyword">then</span> 
         <span class="token keyword">begin</span> 
    AddToSystemJournal<span class="token punctuation">(</span><span class="token string">'Location reached!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">Result</span><span class="token operator">:=</span><span class="token keyword">true</span><span class="token punctuation">;</span> 
    <span class="token keyword">Exit</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span><span class="token punctuation">;</span> 
      <span class="token keyword">end</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span><span class="token punctuation">;</span> 
<span class="token keyword">End</span><span class="token punctuation">;</span></code>`,H,w,L,u,_='<code class="language-pascal">look module mover3d<span class="token punctuation">.</span>pas</code>',S,m,D,k,z='<code class="language-python"><span class="token keyword">def</span> <span class="token function">GetPathArray</span><span class="token punctuation">(</span>DestX<span class="token punctuation">,</span> DestY<span class="token punctuation">,</span> Optimized<span class="token punctuation">,</span> Accuracy<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">></span> <span class="token builtin">list</span></code>';return{c(){e=p("h1"),e.textContent=`${B}`,P=o(),i=p("p"),i.innerHTML="<strong>Description:</strong>",b=o(),r=p("p"),r.innerHTML="Calculates path from present position to point with <em>DestX</em> and <em>DestY</em>. Calculated path point will be written to <em>PathArray</em>. Returns path length.",T=o(),y=p("p"),y.innerHTML=`<em>Optimized</em> - not in use, left for compatibility. Use <a href="Api/MoveHeuristicMult">MoveHeuristicMult</a> 
<em>Accuracy</em> - approaching accuracy: 0 - exactly to destination point, 1 - in area of 1 tiles from destination point, etc. Limited to 1000 tiles.
<em>PathArray</em> - founded points array.`,M=o(),d=p("p"),d.innerHTML=`This method call <a href="Api/GetPathArray3D">GetPathArray3D</a> for calculation.
<strong>Pascal Syntax:</strong>`,x=o(),c=p("pre"),v=o(),f=p("p"),f.textContent="Pascal Example:",C=o(),l=p("pre"),H=o(),w=p("p"),w.textContent="Pascal Example 2:",L=o(),u=p("pre"),S=o(),m=p("p"),m.innerHTML="<strong>Python Syntax:</strong>",D=o(),k=p("pre"),A(c,"class","language-pascal"),A(l,"class","language-pascal"),A(u,"class","language-pascal"),A(k,"class","language-python")},m(n,s){a(n,e,s),a(n,P,s),a(n,i,s),a(n,b,s),a(n,r,s),a(n,T,s),a(n,y,s),a(n,M,s),a(n,d,s),a(n,x,s),a(n,c,s),c.innerHTML=Y,a(n,v,s),a(n,f,s),a(n,C,s),a(n,l,s),l.innerHTML=G,a(n,H,s),a(n,w,s),a(n,L,s),a(n,u,s),u.innerHTML=_,a(n,S,s),a(n,m,s),a(n,D,s),a(n,k,s),k.innerHTML=z},p:I,i:I,o:I,d(n){n&&t(e),n&&t(P),n&&t(i),n&&t(b),n&&t(r),n&&t(T),n&&t(y),n&&t(M),n&&t(d),n&&t(x),n&&t(c),n&&t(v),n&&t(f),n&&t(C),n&&t(l),n&&t(H),n&&t(w),n&&t(L),n&&t(u),n&&t(S),n&&t(m),n&&t(D),n&&t(k)}}}const h={title:"GetPathArray",published:"2020-02-21T21:36:59.459Z",author:"Vizit0r",summary:"API",layout:"blog"},{title:B,published:g,author:J,summary:Z,layout:j}=h;class q extends E{constructor(e){super();R(this,e,null,W,O,{})}}export{q as default,h as metadata};
