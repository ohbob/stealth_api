import{S as R,i as U,s as W,e as p,f as e,g as P,h as a,n as N,p as t}from"./vendor.47d6f2b6.js";function $(_){let o,F,u,T,c,b,k,x,r,I,f,S,l,B='<code class="language-pascal"><span class="token keyword">function</span> GetFindedList<span class="token punctuation">(</span><span class="token keyword">var</span> UserList <span class="token punctuation">:</span> TStringList<span class="token punctuation">)</span> <span class="token punctuation">:</span> Boolean<span class="token punctuation">;</span></code>',G,d,v,y,C,i,E=`<code class="language-pascal"><span class="token keyword">function</span> GetFoundItemsFromStringList<span class="token punctuation">(</span><span class="token keyword">var</span> Items<span class="token punctuation">:</span> <span class="token keyword">Array</span> <span class="token keyword">Of</span> Cardinal<span class="token punctuation">)</span><span class="token punctuation">:</span> Integer<span class="token punctuation">;</span>
<span class="token keyword">var</span> List<span class="token punctuation">:</span> TStringList<span class="token punctuation">;</span> i<span class="token punctuation">:</span> Integer<span class="token punctuation">;</span>
<span class="token keyword">begin</span>
  List <span class="token operator">:=</span> TStringList<span class="token punctuation">.</span>Create<span class="token punctuation">;</span>
  <span class="token keyword">if</span> GetFindedList<span class="token punctuation">(</span>List<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">False</span> <span class="token keyword">then</span> <span class="token keyword">Result</span> <span class="token operator">:=</span> <span class="token number">0</span>
  <span class="token keyword">else</span> <span class="token keyword">begin</span>
    SetLength<span class="token punctuation">(</span>Items<span class="token punctuation">,</span> List<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token keyword">to</span> Length<span class="token punctuation">(</span>Items<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">do</span> Items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:=</span> StrToInt<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token operator">+</span>List<span class="token punctuation">.</span>Strings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">Result</span> <span class="token operator">:=</span> Length<span class="token punctuation">(</span>Items<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
  List<span class="token punctuation">.</span>Free<span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span></code>`,A,L,H,m,M,w;return{c(){o=p("h1"),o.textContent=`${q}`,F=e(),u=p("p"),u.textContent="Fill UserList by search results. If found nothing, returns false and empty list, else true.",T=e(),c=p("p"),c.innerHTML='Search can be done with <a href="Api/FindType">FindType</a>, <a href="Api/FindTypeEx">FindTypeEx</a>, <a href="Api/FindNotoriety">FindNotoriety</a>, etc',b=e(),k=p("p"),k.textContent="WARNING! IDs in list in hex!",x=e(),r=p("p"),r.innerHTML='NB: Starting from version 7.9.0 function <a href="Api/GetFoundItems">GetFoundItems</a> available, returns array of found items.',I=e(),f=p("p"),f.innerHTML="<strong>Pascal Syntax:</strong>",S=e(),l=p("pre"),G=e(),d=p("p"),d.textContent="Warning: var with type TStringList should be created before calling GetFindedList and be disposed after!",v=e(),y=p("p"),y.textContent="Pascal Example 1:",C=e(),i=p("pre"),A=e(),L=p("p"),L.innerHTML="<strong>Python Syntax:</strong>",H=e(),m=p("h4"),m.textContent="NB: Python doesn\u2019t support this method",M=e(),w=p("p"),w.innerHTML='See <a href="Api/GetFoundList">GetFoundList</a>',P(l,"class","language-pascal"),P(i,"class","language-pascal")},m(s,n){a(s,o,n),a(s,F,n),a(s,u,n),a(s,T,n),a(s,c,n),a(s,b,n),a(s,k,n),a(s,x,n),a(s,r,n),a(s,I,n),a(s,f,n),a(s,S,n),a(s,l,n),l.innerHTML=B,a(s,G,n),a(s,d,n),a(s,v,n),a(s,y,n),a(s,C,n),a(s,i,n),i.innerHTML=E,a(s,A,n),a(s,L,n),a(s,H,n),a(s,m,n),a(s,M,n),a(s,w,n)},p:N,i:N,o:N,d(s){s&&t(o),s&&t(F),s&&t(u),s&&t(T),s&&t(c),s&&t(b),s&&t(k),s&&t(x),s&&t(r),s&&t(I),s&&t(f),s&&t(S),s&&t(l),s&&t(G),s&&t(d),s&&t(v),s&&t(y),s&&t(C),s&&t(i),s&&t(A),s&&t(L),s&&t(H),s&&t(m),s&&t(M),s&&t(w)}}}const j={title:"GetFindedList",published:"2020-02-21T21:36:59.459Z",author:"Vizit0r",summary:"API",layout:"blog"},{title:q,published:D,author:O,summary:V,layout:Z}=j;class J extends R{constructor(o){super();U(this,o,null,$,W,{})}}export{J as default,j as metadata};
