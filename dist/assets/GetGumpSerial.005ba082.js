import{S as N,i as R,s as $,e as p,f as t,g as C,h as a,n as P,p as e}from"./vendor.47d6f2b6.js";function j(D){let l,S,f,w,r,d,k,b,m,I,o,A='<code class="language-pascal"><span class="token keyword">function</span> GetGumpSerial<span class="token punctuation">(</span>GumpIndex <span class="token punctuation">:</span> Integer<span class="token punctuation">)</span> <span class="token punctuation">:</span> Cardinal<span class="token punctuation">;</span></code>',T,G,H,u,E=`<code class="language-pascal"><span class="token keyword">If</span> GetGumpsCount <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">then</span>
  <span class="token keyword">if</span> GetGumpSerial<span class="token punctuation">(</span>GetGumpsCount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">$15A7DDF</span> <span class="token keyword">then</span>
    CloseSimpleGump<span class="token punctuation">(</span>GetGumpsCount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,L,x,M,i,q='<code class="language-pascal"></code>',_,y,v,c,B='<code class="language-python"><span class="token keyword">def</span> <span class="token function">GetGumpSerial</span><span class="token punctuation">(</span>GumpIndex<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> uint</code>';return{c(){l=p("h1"),l.textContent=`${F}`,S=t(),f=p("p"),f.innerHTML="Returns Serial ID for gump with list index <em>GumpIndex</em>",w=t(),r=p("p"),r.textContent="Returns 0 if gump index incorrect (out of gumps list) or char disconnected.",d=t(),k=p("p"),k.textContent="NB: SerialID CAN BE unique, but thats not a rule!",b=t(),m=p("p"),m.innerHTML="<strong>Pascal Syntax:</strong>",I=t(),o=p("pre"),T=t(),G=p("p"),G.textContent="Pascal Example:",H=t(),u=p("pre"),L=t(),x=p("p"),x.textContent="Pascal Example 2:",M=t(),i=p("pre"),_=t(),y=p("p"),y.innerHTML="<strong>Python Syntax:</strong>",v=t(),c=p("pre"),C(o,"class","language-pascal"),C(u,"class","language-pascal"),C(i,"class","language-pascal"),C(c,"class","language-python")},m(s,n){a(s,l,n),a(s,S,n),a(s,f,n),a(s,w,n),a(s,r,n),a(s,d,n),a(s,k,n),a(s,b,n),a(s,m,n),a(s,I,n),a(s,o,n),o.innerHTML=A,a(s,T,n),a(s,G,n),a(s,H,n),a(s,u,n),u.innerHTML=E,a(s,L,n),a(s,x,n),a(s,M,n),a(s,i,n),i.innerHTML=q,a(s,_,n),a(s,y,n),a(s,v,n),a(s,c,n),c.innerHTML=B},p:P,i:P,o:P,d(s){s&&e(l),s&&e(S),s&&e(f),s&&e(w),s&&e(r),s&&e(d),s&&e(k),s&&e(b),s&&e(m),s&&e(I),s&&e(o),s&&e(T),s&&e(G),s&&e(H),s&&e(u),s&&e(L),s&&e(x),s&&e(M),s&&e(i),s&&e(_),s&&e(y),s&&e(v),s&&e(c)}}}const z={title:"GetGumpSerial",published:"2020-02-21T21:36:59.459Z",author:"Vizit0r",summary:"API",layout:"blog"},{title:F,published:Z,author:J,summary:K,layout:O}=z;class Q extends N{constructor(l){super();R(this,l,null,j,$,{})}}export{Q as default,z as metadata};
